[question1]
code = """
numbers = [1, 2, 3, 4, 5]
squared = [x ** 2 for x in numbers]
print(squared)
"""
question1=What is the output of the code snippet?
options1=[1, 4, 9, 16, 25]; [2, 4, 6, 8, 10]; [1, 2, 3, 4, 5]; [1, 8, 27, 64, 125]
correctAnswer1=1

[question2]
code = """
def check_prime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

print(check_prime(11))
"""
question2=Does this function correctly identify prime numbers?
options2=True; False
correctAnswer2=1

[question3]
code = """
try:
    x = 1 / 0
except ZeroDivisionError:
    print("Cannot divide by zero")
finally:
    print("This is always executed")
"""
question3=What is the output of this code?
options3=Cannot divide by zero; This is always executed; Cannot divide by zero\nThis is always executed; Error
correctAnswer3=3

[question4]
code = """
x = lambda a, b: a * b
print(x(5, 6))
"""
question4=What is the output of the lambda function?
options4=11; 30; 5; None
correctAnswer4=2

[question5]
code = """
import re
pattern = re.compile('^[a-zA-Z]+$')
result = pattern.match('Python3')
print(result is not None)
"""
question5=What will be the output of this regular expression match?
options5=True; False
correctAnswer5=2

[question6]
code = """
list = ['a', 'b', 'c', 'd']
print(''.join(list))
"""
question6=How does the join method work in this example?
options6=abcd; ['a', 'b', 'c', 'd']; a-b-c-d; Error
correctAnswer6=1

[question7]
code = """
import json

person = '{"name": "John", "age": 30, "city": "New York"}'
person_dict = json.loads(person)

print(person_dict['age'])
"""
question7=What does this code snippet output?
options7=John; 30; New York; {"name": "John", "age": 30, "city": "New York"}
correctAnswer7=2

[question8]
code = """
def decorator(func):
    def inner():
        print("Before function call")
        func()
        print("After function call")
    return inner

@decorator
def say_hello():
    print("Hello")

say_hello()
"""
question8=What is the purpose of the decorator in this code?
options8=To print messages before and after the function call; To modify the function output; To repeat the function twice; To catch any errors in the function
correctAnswer8=1

[question9]
code = """
class MyClass:
    __secret_count = 0

    def count(self):
        self.__secret_count += 1
        print(self.__secret_count)

counter = MyClass()
counter.count()
counter.count()
print(counter.__secret_count)
"""
question9=What concept is demonstrated by `__secret_count` in this code?
options9=Inheritance; Polymorphism; Encapsulation; Exception Handling
correctAnswer9=3

[question10]
code = """
from functools import reduce

numbers = [1, 2, 3, 4]
result = reduce(lambda a, b: a * b, numbers)
print(result)
"""
question10=What does the reduce function do in this code?
options10=It finds the largest number in the list; It multiplies all numbers in the list together; It adds all numbers in the list together; It counts the elements in the list
correctAnswer10=2
